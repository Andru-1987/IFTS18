# 1)Escribir un programa que procese cadenas 
# de texto ingresados por el usuario.
# La lectura finaliza cuando se haya ingresado una cadena vacía. 
# Al finalizar, informar la cantidad total de ocurrencias de cada palabra,
# en todas las cadenas ingresadas. Ejemplo: "que" = 5, “tal” = 3.
# ¿Cómo se podrían informar además las ocurrencias de espacio


# def cleanString(frase):
# 	charsToRem=".,@!?'"

# 	for chars in charsToRem:
# 		frase=frase.replace(chars," ")

# 	return frase

# def contadorEmptyScpaces(frase):
# 	# Contador clasico
# 	cont=0
# 	for palabras in frase:
# 		if palabras==" ":
# 			cont+=1
# 	print('Cantidad de espacios en la frase: {}'.format(cont))
# 	return cont

# def cleanEmptySpaces(frase):
# # 	Limpia la frase y genera dos objetos:
# # 	a) lista con las palabras sin los espacios
# # 	b) set de palabras sin repeticiones

# 	listaFrase=frase.split(' ')

# 	for element in listaFrase:
# 		if len(element)==0:
# 			listaFrase.remove(element)


# 	setFrase=set(listaFrase)
# 	setFrase=set(sorted(setFrase))
	

# 	return listaFrase,setFrase

# def dicPalabras(listaFrase,setFrase):
# 	# usando count()

# 	dictDePalabras={}

# 	for n in setFrase:
# 		valor=listaFrase.count(n)
# 		dictDePalabras[n]=valor

# 	return dictDePalabras

# import os

# def main():

# 	userInput=input('Ingrese frase a analizar\n')
# 	a,b=cleanEmptySpaces(cleanString(userInput))
# 	objetoPalabras=dicPalabras(a,b)

# 	cont=contadorVacios=contadorEmptyScpaces(userInput)
# 	objetoPalabras['espacios']=cont

# 	os.system('clear')

# 	for n in objetoPalabras:
# 		valor=objetoPalabras.get(n)
# 		print('{} = {}'.format(n,valor))


# main()





# 2)Crea un diccionario donde la clave sea el 
# nombre del usuario y el valor sea el teléfono (no es necesario validar).
# Validar que no se puedan ingresar nombres repetidos.

# def validarUnico(key,baseDatos):
# # Validar de que sea único
# 	boolean=True

# 	if key not in baseDatos:
# 		boolean=True
# 	else:
# 		boolean=False
# 	return boolean

# def insertarUsuario(usuario,phone,baseDatos):
# 	baseDatos[usuario]=phone
# 	return baseDatos


# def main():
# 	baseDatos={'Anderson':4477}

# 	name=input('Ingrese el nombre del usuario a insertar\n')
# 	boolean=validarUnico(name,baseDatos)
# 	if boolean:
# 		phone=input('Ingrese # de telefono\n')
# 		baseDatos=insertarUsuario(name,phone,baseDatos)
# 		print('El usuario: {} Tel:{}'.format(name,phone))

# 	else:
# 		phone=None
# 		print('El usuario ya se encuentra registrado')


# main()



# 3)Escribir una función que reciba una 
# lista de tuplas (País, Ciudad),
# y que devuelva un diccionario en donde las claves sean los países, 
# y los valores una lista con las ciudades.
# Por ejemplo:
# 	lista = [ 
# 	('Argentina', 'Cordoba'),
# 	('Argentina', 'Corrientes'),
# 	('Chile', 'Santiago')]


# def transDic(lista):
# 	diccionario={}
# 	paises=[]

# 	for tuplaItem in lista:
# 		paises.append(tuplaItem[0])
# 	setPaises=set(paises)


# 	for pais in setPaises:
# 		ciudades=[]

# 		for item in lista:
# 			if item[0]==pais:
# 				ciudades.append(item[1])

# 		diccionario[pais]=ciudades



# 	print(diccionario)


# lista = [ 
# ('Argentina', 'Cordoba'),
# ('Argentina', 'Corrientes'),
# ('Chile', 'Santiago'),
# ('Chile', 'Valparaiso'),
# ]


# transDic(lista)



# # 4)Crear un programa para gestionar datos de los socios de un club,
# # permitiendo:
# # a) Cargar información de los socios en un diccionario
# # para acceder por número de socio.
# # Los datos por almacenar son:
# # número, nombre y apellido, fecha de ingreso (ddmmaaaa),
# # cuota al día (s/n). 
# # b) Informar cantidad de socios del club.
# # c) Solicitar al usuario el número de un socio
# # y registrar que ha pagado todas las cuotas adeudadas.
# # d) Solicitar el nombre y apellido de un socio y
# # darlo de baja (eliminarlo del listado).
# # e) Imprimir el listado de socios completo.


# def generarID(baseDatosSocios):
# 	# disponibilidad de idAutoincremental
# 	idDisponible=max(baseDatosSocios)
# 	return idDisponible+1

# def ingresoSocio(baseDatosSocios):
# 	# a) cargar Informacion de socio
# 	from datetime import datetime
# 	fechaHoy=datetime.today().strftime('%d%m%Y')

# 	# Ingreso de datos y datos por default
# 	idSocio=generarID(baseDatosSocios)
# 	nombre=input('Ingrese el nombre del Socio\n').lower().capitalize()
# 	apellido=input('Ingrese el apellido del socio\n').lower().capitalize()
# 	fechaIngreso=input('Fecha de Ingreso formato: ddmmaaaa\nDefault la fecha de hoy') or fechaHoy
	
# 	cuotasPagasAlDia=input('Cuotas al día? Ingrese \'n\' si no está al día\nDefault es \'s\'').lower() or 's'
# 	setCuotas=False
# 	if cuotasPagasAlDia=='s':
# 		setCuotas=True
# 	else:
# 		setCuotas=False

# 	listaSocio=[nombre,apellido,fechaIngreso,setCuotas]

# 	baseDatosSocios[idSocio]=listaSocio
# 	return baseDatosSocios

# def cantidadSocios(baseDatosSocios):
# 	#b) retorna la cantidad total de Socios
# 	cont=0
# 	for i in baseDatosSocios:
# 		cont+=1
# 	print('La cantidad de socios actuales en el club: {}'.format(cont))

# def registroCuotas(baseDatosSocios): 
# 	#c)	Solicitar al usuario el número de un socio
# 	# y registrar que ha pagado todas las cuotas adeudadas.
# 	idSocio=int(input('Ingrese el idSocio:'))
# 	cuotasAlDia=baseDatosSocios.get(idSocio)[3]
# 	if cuotasAlDia==True:
# 		print('El Socio tiene las cuotas a la fecha totalmente pagas')
# 	else:
# 		seguimos=input('El cliente cuenta con cuotas impagas.\nDesea actualizar su estado?\nIngrese cualquier tecla para Actualizar su estado a Pago\nPor default es seguir en mora.\n').lower() or 'n'
# 		if seguimos=='n':
# 			print('Socio seguira moroso')
# 		else:
# 			baseDatosSocios.get(idSocio)[3]=True

# 	return baseDatosSocios

# def busquedaSocio(baseDatosSocios):
# 	nombre=input('Ingrese nombre del usuario\n').lower().capitalize()
# 	apellido=input('Ingrese nombre del usuario\n').lower().capitalize()

# 	idSocio=None

# 	for key,value in baseDatosSocios.items():

# 		if value[0]==nombre and value[1]==apellido:
# 			idSocio=key
	
# 	return idSocio

# def darBajaSocio(baseDatosSocios):
# 	# dar de baja al socio pedido
# 	idSocio=busquedaSocio(baseDatosSocios)
# 	if idSocio==None:
# 		print('El usuario no existe')
# 	else:
# 		del baseDatosSocios[idSocio]

# 	return baseDatosSocios

# def displaSocios(baseDatosSocios):
# 	# muestra todos los socio

# 	for key in sorted(baseDatosSocios):
# 		nombre=baseDatosSocios[key][0]
# 		apellido=baseDatosSocios[key][1]
# 		print('Usuario # {}\n  Nombre Completo: {}, {}'.format(key,apellido,nombre))

# def notEmpty(numero):

# 	user_format=re.compile(r'^[1-6]*$')
# 	valido=re.match(user_format,numero)

# 	while valido==None:
# 		numero=input('Ingrese # valido\n')
# 		valido=re.match(user_format,numero)

# 	return int(numero)

# import os
# import re

# def main():
# 	baseDatosSocios= {
# 		# idSocio:[nombre,apellido,fecha=(ddmmaaaa),cuotas=boolean]
# 		3:['Anderson','Oca',19102020,True],
# 		2:['Mateo','Roca',19102019,False]
# 	}

# 	print('Opciones\n Ingresar #1. Ingresar socios.\n Ingresar #2 Informe cantidad de socios en el club.')
# 	print(' Ingresar #3. Actualiar Status de cuotas de socio. \n Ingresar #4. Dar de baja a Socio.\n Ingresar #5. Imprimir lista de socios. Ingresar #5\n Ingresar #6. Salir del Programa.\n')
# 	userInput=notEmpty(userInput:=input('Ingrese una opcion:\n'))
# 	os.system('clear')
	
# 	while userInput!=6:
# 		os.system('clear')
# 		print('Opciones\n Ingresar #1. Ingresar socios.\n Ingresar #2 Informe cantidad de socios en el club.')
# 		print(' Ingresar #3. Actualiar Status de cuotas de socio. \n Ingresar # 4. Dar de baja a Socio.\n Ingresar #5. Imprimir lista de socios. Ingresar #5\n Ingresar #6. Salir del Programa.\n')
	
# 		if userInput==1:
# 			baseDatosSocios=ingresoSocio(baseDatosSocios)
# 		elif userInput==2:
# 			cantidadSocios(baseDatosSocios)
# 		elif userInput==3:
# 			registroCuotas(baseDatosSocios)
# 		elif userInput==4:
# 			darBajaSocio(baseDatosSocios)
# 		elif userInput==5:
# 			displaSocios(baseDatosSocios)
# 		else:
# 			userInput=6
# 			print('Gracias por usar el programa')

		
# 		userInput=notEmpty(userInput:=input('Ingrese una opcion:\n'))

# main()




# 5) Escribir un programa que gestione las 
# facturas pendientes de cobro de una empresa. 
# Las facturas se almacenarán en un diccionario donde la clave de cada factura
# será el número de factura y el valor de la factura. 

# El programa debe preguntar al usuario si quiere añadir una nueva factura,
# pagar una existente o terminar.

	# Si desea añadir una nueva factura se preguntará por el número de factura y 
	# su costo y se añadirá al diccionario. 

	# Si se desea pagar una factura se preguntará 
	# por el número de factura y se eliminará del diccionario. 

	# Después de cada operación el programa debe mostrar 
	# por pantalla la cantidad cobrada hasta el momento y la cantidad pendiente de cobro.


# def cantidadGeneral(invoiceDB,invoiceDBPagados):
# 	totalPagados=0
# 	totalAdeudado=0

# 	for factura,valor in invoiceDB.items():
# 		totalAdeudado+=valor.get('monto')

# 	for factura,valor in invoiceDBPagados.items():
# 		totalPagados+=valor.get('monto')

# 	print('Valor total pagados: ${}\nValor total adeudado: ${}'.format(totalPagados,totalAdeudado))

# def validarNum(numero):
# 	import re

# 	user_format=re.compile(r'^[0-9]*$')
# 	valido=re.match(user_format,numero)

# 	while valido==None:
# 		numero=input('Numero NO valido\n')
# 		valido=re.match(user_format,numero)

# 	return int(numero)

# def validarInvoice(invoice):
# 	import re

# 	user_format=re.compile(r'^[A-Z-0-9]*$')
# 	valido=re.match(user_format,invoice)

# 	while valido==None:
# 		invoice=input('La factura debe ser un valor AlphaNumérico con Letras en Mayúsculas\n')
# 		valido=re.match(user_format,invoice)

# 	return invoice

# def addInvoice(invoiceDB):
# 	print('Agregar Factura')
	
# 	# agrego datos a la factura

# 	numInvoice=validarInvoice(numInvoice:=input('Ingrese el número de factura\n'))
# 	amount=validarNum(amount:=input('Ingrese el monto de la factura\n'))
	
# 	listaData=[numInvoice,amount,False]
# 	listaValoresData=['factura','monto','pagado']
# 	dataInvoice={}

# 	idInvoice=str(numInvoice)+'-'+str(amount)

# 	for n in listaValoresData:
# 		index=listaValoresData.index(n)
# 		dataInvoice[n]=listaData[index]


# 	invoiceDB[idInvoice]=dataInvoice

# 	return invoiceDB

# def pagarFactura(invoiceDB):
# 	print('Pagar factura')
# 	numInvoice=validarInvoice(numInvoice:=input('Ingrese el número de factura\n'))
# 	encontrado=False

# 	for n,value in invoiceDB.items():

# 		if value.get('factura')==numInvoice:
# 			encontrado=True
# 			print('Desea modificar el estado de la factura?\n')
# 			userInput=input('Ingrese \"n\" si no desea modificarla\nPor default se cambiará la factura\n').lower() or 's'

# 			if userInput=='s':
# 				value['pagado']=True
# 			else:
# 				value['pagado']=False

# 	if encontrado==False:
# 		print('Factura {} no encontrada'.format(numInvoice))
	
# 	return invoiceDB

# def invoicePagados(invoiceDB,invoiceDBPagados):

# 	encontrado=False
# 	# Recorro y cambio de database a facturas pagadas
# 	for facturas,data in invoiceDB.items():
# 		# Esta parte es por si existiera alguna factura en false dando vuelta.
# 		if data.get('pagado')==True:
# 			encontrado=True
# 			invoiceDBPagados[facturas]=data

# 	if encontrado==True:	
# 		# elimino la factura desde el origina;l
# 		for facturas in invoiceDBPagados:
# 			if facturas in invoiceDB:
# 				del invoiceDB[facturas]


# 	return invoiceDB,invoiceDBPagados

# def mostrarInvoices(invoiceDB):
# 	for n in invoiceDB:
# 		print('Facturas pendientes a pago: {}'.format(n))

# def main():

# 	import os

# 	invoiceDB={ '333-355':{'factura':'333', 'monto':355,'pagado':False},
# 				'839-444':{'factura':'839', 'monto':645,'pagado':False}
# 	}

# 	invoiceDBPagados={}

# 	print('Programa de facturación.\n')

# 	userInput=input('Ingrese opcion:\n Ingrese #1. Para añadir factura\n Ingrese #2. Pagar la factura pedida.\n Ingrese \"n\" para dar fin al programa\n')
# 	os.system('clear')

# 	while userInput!='n':
# 		os.system('clear')
# 		cantidadGeneral(invoiceDB,invoiceDBPagados)

# 		if userInput=='1':
# 		# 	# Agregar factura
# 			invoiceDB=addInvoice(invoiceDB)

# 		elif userInput=='2':
# 		# 	# Borra factura
# 			mostrarInvoices(invoiceDB)
# 			invoiceDB=pagarFactura(invoiceDB)
# 			print('')
# 			invoiceDB,invoiceDBPagados=invoicePagados(invoiceDB,invoiceDBPagados)
# 		# else:

# 		userInput=input('Ingrese opcion:\n Ingrese #1. Para añadir factura\n Ingrese #2. Pagar la factura pedida.\n Ingrese \"n\" para dar fin al programa\n')


# main()
